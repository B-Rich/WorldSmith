/*****************************  NOTICE  ********************************************
* This file was autogenerated.  Do not edit.                                       *
* Instead, modify the schema in DataSchema related to this class and regenerate it *
***********************************************************************************/
using System;
using System.ComponentModel;
using WorldSmith.Panels;
using WorldSmith.Dialogs;
using KVLib;

namespace WorldSmith.DataClasses
{
	public partial class DotaModifier : BaseScriptType
	{
		public DotaModifier(KeyValue kv)
			: base(kv)
		{
		}
		public DotaModifier(string className)
			: base(className)
		{
		}
		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(typeof(NumberValue), "")]
		public NumberValue Duration
		{
			get
			{
				return default(NumberValue);
			}
			set
			{
				GetSubkey("Duration").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(false)]
		public bool IsDebuff
		{
			get
			{
				KeyValue kv = GetSubkey("IsDebuff");
				return (kv == null ? false : kv.GetBool());
			}
			set
			{
				GetSubkey("IsDebuff").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(false)]
		public bool IsPurgable
		{
			get
			{
				KeyValue kv = GetSubkey("IsPurgable");
				return (kv == null ? false : kv.GetBool());
			}
			set
			{
				GetSubkey("IsPurgable").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(false)]
		public bool IsHidden
		{
			get
			{
				KeyValue kv = GetSubkey("IsHidden");
				return (kv == null ? false : kv.GetBool());
			}
			set
			{
				GetSubkey("IsHidden").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(false)]
		public bool RemoveOnDeath
		{
			get
			{
				KeyValue kv = GetSubkey("RemoveOnDeath");
				return (kv == null ? false : kv.GetBool());
			}
			set
			{
				GetSubkey("RemoveOnDeath").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(false)]
		public bool AllowIllusionDuplicate
		{
			get
			{
				KeyValue kv = GetSubkey("AllowIllusionDuplicate");
				return (kv == null ? false : kv.GetBool());
			}
			set
			{
				GetSubkey("AllowIllusionDuplicate").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue("")]
		public string EffectName
		{
			get
			{
				KeyValue kv = GetSubkey("EffectName");
				return (kv == null ? "" : kv.GetString());
			}
			set
			{
				GetSubkey("EffectName").Set(value.ToString());
			}
		}

		public enum EffectAttachTypeEnum
		{
			start_at_origin,
			follow_origin,
			start_at_customorigin,
			follow_customorigin,
			start_at_attachment,
			follow_attachment,
			follow_eyes,
			follow_overhead,
			world_origin,
			follow_rootbone,
			follow_attachment_substepped,
			follow_renderorigin,
			attach_hitloc,
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(EffectAttachTypeEnum.follow_origin)]
		public EffectAttachTypeEnum EffectAttachType
		{
			get
			{
				KeyValue kv = GetSubkey("EffectAttachType");
				return (kv == null ? EffectAttachTypeEnum.follow_origin : kv.GetEnum<EffectAttachTypeEnum>());
			}
			set
			{
				GetSubkey("EffectAttachType").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue("")]
		public string StatusEffectName
		{
			get
			{
				KeyValue kv = GetSubkey("StatusEffectName");
				return (kv == null ? "" : kv.GetString());
			}
			set
			{
				GetSubkey("StatusEffectName").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(typeof(NumberValue), "")]
		public NumberValue StatusEffectPriority
		{
			get
			{
				return default(NumberValue);
			}
			set
			{
				GetSubkey("StatusEffectPriority").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue("")]
		public string ModelName
		{
			get
			{
				KeyValue kv = GetSubkey("ModelName");
				return (kv == null ? "" : kv.GetString());
			}
			set
			{
				GetSubkey("ModelName").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue("")]
		public string OverrideAnimation
		{
			get
			{
				KeyValue kv = GetSubkey("OverrideAnimation");
				return (kv == null ? "" : kv.GetString());
			}
			set
			{
				GetSubkey("OverrideAnimation").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(typeof(NumberValue), "")]
		public NumberValue ThinkInterval
		{
			get
			{
				return default(NumberValue);
			}
			set
			{
				GetSubkey("ThinkInterval").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue("")]
		public string Aura
		{
			get
			{
				KeyValue kv = GetSubkey("Aura");
				return (kv == null ? "" : kv.GetString());
			}
			set
			{
				GetSubkey("Aura").Set(value.ToString());
			}
		}

		[Flags]
		public enum Aura_TeamsFlags : long
		{
			DOTA_UNIT_TARGET_TEAM_NONE = 0,
			DOTA_UNIT_TARGET_TEAM_ENEMY = 1 << 1,
			DOTA_UNIT_TARGET_TEAM_FRIENDLY = 1 << 2,
			DOTA_UNIT_TARGET_TEAM_CUSTOM = 1 << 3,
			DOTA_UNIT_TARGET_TEAM_BOTH = 1 << 4,
			DOTA_UNIT_TARGET_ALL = 0xFFFF,
		}

		[Editor(typeof(FlagEnumDialogUIEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(Aura_TeamsFlags.DOTA_UNIT_TARGET_TEAM_NONE)]
		public Aura_TeamsFlags Aura_Teams
		{
			get
			{
				KeyValue kv = GetSubkey("Aura_Teams");
				return (kv == null ? Aura_TeamsFlags.DOTA_UNIT_TARGET_TEAM_NONE : kv.GetEnum<Aura_TeamsFlags>());
			}
			set
			{
				GetSubkey("Aura_Teams").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(typeof(NumberValue), "")]
		public NumberValue Aura_Radius
		{
			get
			{
				return default(NumberValue);
			}
			set
			{
				GetSubkey("Aura_Radius").Set(value.ToString());
			}
		}

		[Flags]
		public enum Aura_TypesFlags : long
		{
			DOTA_UNIT_TARGET_NONE = 0,
			DOTA_UNIT_TARGET_HERO = 1 << 1,
			DOTA_UNIT_TARGET_CREEP = 1 << 2,
			DOTA_UNIT_TARGET_BUILDING = 1 << 3,
			DOTA_UNIT_TARGET_MECHANICAL = 1 << 4,
			DOTA_UNIT_TARGET_COURIER = 1 << 5,
			DOTA_UNIT_TARGET_OTHER = 1 << 6,
			DOTA_UNIT_TARGET_TREE = 1 << 7,
			DOTA_UNIT_TARGET_CUSTOM = 1 << 8,
			DOTA_UNIT_TARGET_BASIC = 1 << 9,
			DOTA_UNIT_TARGET_OTHERS = 1 << 10,
			DOTA_UNIT_TARGET_ALL = 0xFFFF,
		}

		[Editor(typeof(FlagEnumDialogUIEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(Aura_TypesFlags.DOTA_UNIT_TARGET_NONE)]
		public Aura_TypesFlags Aura_Types
		{
			get
			{
				KeyValue kv = GetSubkey("Aura_Types");
				return (kv == null ? Aura_TypesFlags.DOTA_UNIT_TARGET_NONE : kv.GetEnum<Aura_TypesFlags>());
			}
			set
			{
				GetSubkey("Aura_Types").Set(value.ToString());
			}
		}

		[Flags]
		public enum Aura_FlagsFlags : long
		{
			DOTA_UNIT_TARGET_FLAG_NONE = 0,
			DOTA_UNIT_TARGET_FLAG_RANGED_ONLY = 1 << 1,
			DOTA_UNIT_TARGET_FLAG_MELEE_ONLY = 1 << 2,
			DOTA_UNIT_TARGET_FLAG_DEAD = 1 << 3,
			DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES = 1 << 4,
			DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES = 1 << 5,
			DOTA_UNIT_TARGET_FLAG_INVULNERABLE = 1 << 6,
			DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE = 1 << 7,
			DOTA_UNIT_TARGET_FLAG_NO_INVIS = 1 << 8,
			DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS = 1 << 9,
			DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED = 1 << 10,
			DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED = 1 << 11,
			DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED = 1 << 12,
			DOTA_UNIT_TARGET_FLAG_NOT_ILLUSION = 1 << 13,
			DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE = 1 << 14,
			DOTA_UNIT_TARGET_FLAG_MANA_ONLY = 1 << 15,
			DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP = 1 << 16,
			DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO = 1 << 17,
			DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD = 1 << 18,
			DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED = 1 << 19,
		}

		[Editor(typeof(FlagEnumDialogUIEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(Aura_FlagsFlags.DOTA_UNIT_TARGET_FLAG_NONE)]
		public Aura_FlagsFlags Aura_Flags
		{
			get
			{
				KeyValue kv = GetSubkey("Aura_Flags");
				return (kv == null ? Aura_FlagsFlags.DOTA_UNIT_TARGET_FLAG_NONE : kv.GetEnum<Aura_FlagsFlags>());
			}
			set
			{
				GetSubkey("Aura_Flags").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(false)]
		public bool Aura_ApplyToCaster
		{
			get
			{
				KeyValue kv = GetSubkey("Aura_ApplyToCaster");
				return (kv == null ? false : kv.GetBool());
			}
			set
			{
				GetSubkey("Aura_ApplyToCaster").Set(value.ToString());
			}
		}

		public enum AttributesEnum
		{
			MODIFIER_ATTRIBUTE_NONE,
			MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE	,
			MODIFIER_ATTRIBUTE_MULTIPLE,
			MODIFIER_ATTRIBUTE_PERMANENT,
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(AttributesEnum.MODIFIER_ATTRIBUTE_NONE)]
		public AttributesEnum Attributes
		{
			get
			{
				KeyValue kv = GetSubkey("Attributes");
				return (kv == null ? AttributesEnum.MODIFIER_ATTRIBUTE_NONE : kv.GetEnum<AttributesEnum>());
			}
			set
			{
				GetSubkey("Attributes").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(typeof(ActionCollection), "OnCreated")]
		public ActionCollection OnCreated
		{
			get
			{
				return default(ActionCollection);
			}
			set
			{
				GetSubkey("OnCreated").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(typeof(ActionCollection), "OnIntervalThink")]
		public ActionCollection OnIntervalThink
		{
			get
			{
				return default(ActionCollection);
			}
			set
			{
				GetSubkey("OnIntervalThink").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(typeof(ActionCollection), "OnAttacked")]
		public ActionCollection OnAttacked
		{
			get
			{
				return default(ActionCollection);
			}
			set
			{
				GetSubkey("OnAttacked").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(typeof(ActionCollection), "OnAttackLanded")]
		public ActionCollection OnAttackLanded
		{
			get
			{
				return default(ActionCollection);
			}
			set
			{
				GetSubkey("OnAttackLanded").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(typeof(ActionCollection), "OnTakeDamage")]
		public ActionCollection OnTakeDamage
		{
			get
			{
				return default(ActionCollection);
			}
			set
			{
				GetSubkey("OnTakeDamage").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(typeof(ActionCollection), "OnDealDamage")]
		public ActionCollection OnDealDamage
		{
			get
			{
				return default(ActionCollection);
			}
			set
			{
				GetSubkey("OnDealDamage").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(typeof(ActionCollection), "OnDeath")]
		public ActionCollection OnDeath
		{
			get
			{
				return default(ActionCollection);
			}
			set
			{
				GetSubkey("OnDeath").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(typeof(ActionCollection), "OnKill")]
		public ActionCollection OnKill
		{
			get
			{
				return default(ActionCollection);
			}
			set
			{
				GetSubkey("OnKill").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(typeof(ActionCollection), "OnAttackStart")]
		public ActionCollection OnAttackStart
		{
			get
			{
				return default(ActionCollection);
			}
			set
			{
				GetSubkey("OnAttackStart").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(typeof(ActionCollection), "OnDestroy")]
		public ActionCollection OnDestroy
		{
			get
			{
				return default(ActionCollection);
			}
			set
			{
				GetSubkey("OnDestroy").Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(typeof(ModifierPropertyCollection), "")]
		public ModifierPropertyCollection Properties
		{
			get
			{
				return default(ModifierPropertyCollection);
			}
			set
			{
				GetSubkey("Properties").Set(value.ToString());
			}
		}

	}
}
