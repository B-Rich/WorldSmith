/*****************************  NOTICE  ********************************************
* This file was autogenerated.  Do not edit.                                       *
* Instead, modify the schema in DataSchema related to this class and regenerate it *
***********************************************************************************/
using System;
using System.ComponentModel;
using WorldSmith.Panels;
using WorldSmith.Dialogs;
using KVLib;

namespace WorldSmith.DataClasses
{
	public partial class DotaEvent : DotaDataObject
	{
		public DotaEvent(KeyValue kv)
			: base(kv)
		{
		}
		public DotaEvent(string className)
			: base(className)
		{
		}
		[Flags]
		public enum TargetsFlags : long
		{
			CASTER = 1<<0,
			TARGET = 1<<1,
			UNIT = 1<<2,
			ATTACKER = 1<<3,
			PROJECTILE = 1<<4,
		}

		[Editor(typeof(FlagEnumDialogUIEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(TargetsFlags.CASTER)]
		public TargetsFlags Targets
		{
			get
			{
				KeyValue kv = GetSubkey("Targets");
				return (kv == null ? TargetsFlags.CASTER : kv.GetEnum<TargetsFlags>());
			}
			set
			{
				KeyValue kv = GetSubkey("Targets");
				if(kv == null)
				{
					kv = new KeyValue("Targets");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Flags]
		public enum EventAppliesToFlags : long
		{
			ABILITY = 1<<0,
			ITEM = 1<<1,
			MODIFIER = 1<<2,
		}

		[Editor(typeof(FlagEnumDialogUIEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(EventAppliesToFlags.ABILITY)]
		public EventAppliesToFlags EventAppliesTo
		{
			get
			{
				KeyValue kv = GetSubkey("EventAppliesTo");
				return (kv == null ? EventAppliesToFlags.ABILITY : kv.GetEnum<EventAppliesToFlags>());
			}
			set
			{
				KeyValue kv = GetSubkey("EventAppliesTo");
				if(kv == null)
				{
					kv = new KeyValue("EventAppliesTo");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(false)]
		public bool RespectsTargetFlag
		{
			get
			{
				KeyValue kv = GetSubkey("RespectsTargetFlag");
				return (kv == null ? false : kv.GetBool());
			}
			set
			{
				KeyValue kv = GetSubkey("RespectsTargetFlag");
				if(kv == null)
				{
					kv = new KeyValue("RespectsTargetFlag");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(false)]
		public bool ProvidesAttackDamage
		{
			get
			{
				KeyValue kv = GetSubkey("ProvidesAttackDamage");
				return (kv == null ? false : kv.GetBool());
			}
			set
			{
				KeyValue kv = GetSubkey("ProvidesAttackDamage");
				if(kv == null)
				{
					kv = new KeyValue("ProvidesAttackDamage");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(false)]
		public bool RequiresChannelTime
		{
			get
			{
				KeyValue kv = GetSubkey("RequiresChannelTime");
				return (kv == null ? false : kv.GetBool());
			}
			set
			{
				KeyValue kv = GetSubkey("RequiresChannelTime");
				if(kv == null)
				{
					kv = new KeyValue("RequiresChannelTime");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

	}
}
