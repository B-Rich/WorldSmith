/*****************************  NOTICE  ********************************************
* This file was autogenerated.  Do not edit.                                       *
* Instead, modify the schema in DataSchema related to this class and regenerate it *
***********************************************************************************/
using System;
using System.ComponentModel;
using WorldSmith.Panels;
using WorldSmith.Dialogs;
using KVLib;

namespace WorldSmith.DataClasses
{
	[DotaAction]
	[EditorGrammar("Apply %EffectName on %Target using attach behavior %EffectAttachType and custom %ControlPoints")]
	public partial class AttachEffect : TargetedAction
	{
		public AttachEffect(KeyValue kv)
			: base(kv)
		{
		}
		public AttachEffect(string className)
			: base(className)
		{
		}
		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue("")]
		public string EffectName
		{
			get
			{
				KeyValue kv = GetSubkey("EffectName");
				return (kv == null ? "" : kv.GetString());
			}
			set
			{
				KeyValue kv = GetSubkey("EffectName");
				if(kv == null)
				{
					kv = new KeyValue("EffectName");
					KeyValue.AddChild(kv);
				}
				kv.Set(value.ToString());
			}
		}

		public enum EffectAttachTypeEnum
		{
			start_at_origin,
			follow_origin,
			start_at_customorigin,
			follow_customorigin,
			start_at_attachment,
			follow_attachment,
			follow_eyes,
			follow_overhead,
			world_origin,
			follow_rootbone,
			follow_attachment_substepped,
			follow_renderorigin,
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(EffectAttachTypeEnum.follow_origin)]
		public EffectAttachTypeEnum EffectAttachType
		{
			get
			{
				KeyValue kv = GetSubkey("EffectAttachType");
				return (kv == null ? EffectAttachTypeEnum.follow_origin : kv.GetEnum<EffectAttachTypeEnum>());
			}
			set
			{
				KeyValue kv = GetSubkey("EffectAttachType");
				if(kv == null)
				{
					kv = new KeyValue("EffectAttachType");
					KeyValue.AddChild(kv);
				}
				kv.Set(value.ToString());
			}
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(null)]
		public ControlPointList ControlPoints
		{
			get
			{
				return default(ControlPointList);
			}
			set
			{
				KeyValue kv = GetSubkey("ControlPoints");
				if(kv == null)
				{
					kv = new KeyValue("ControlPoints");
					KeyValue.AddChild(kv);
				}
				kv.Set(value.ToString());
			}
		}

	}
}
