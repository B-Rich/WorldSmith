/*****************************  NOTICE  ********************************************
* This file was autogenerated.  Do not edit.                                       *
* Instead, modify the schema in DataSchema related to this class and regenerate it *
***********************************************************************************/
using System;
using System.ComponentModel;
using WorldSmith.Panels;
using WorldSmith.Dialogs;
using KVLib;

namespace WorldSmith.DataClasses
{
	[DotaAction]
	[EditorGrammar("Knock back %Target units by %Distance units.  Throw them %Height units in the air for %Duration seconds.  Using fixed distance %IsFixedDistance")]
	public partial class Knockback : TargetedAction
	{
		public Knockback(KeyValue kv)
			: base(kv)
		{
		}
		public Knockback(string className)
			: base(className)
		{
		}
		[Category("Misc")]
		[Description("probably null")]
		[DefaultValue("")]
		public string Center
		{
			get
			{
				KeyValue kv = GetSubkey("Center");
				return (kv == null ? "" : kv.GetString());
			}
			set
			{
				KeyValue kv = GetSubkey("Center");
				if(kv == null)
				{
					kv = new KeyValue("Center");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("int")]
		[DefaultValue(typeof(NumberValue), "")]
		public NumberValue Distance
		{
			get
			{
				return default(NumberValue);
			}
			set
			{
				KeyValue kv = GetSubkey("Distance");
				if(kv == null)
				{
					kv = new KeyValue("Distance");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("bool")]
		[DefaultValue(false)]
		public bool IsFixedDistance
		{
			get
			{
				KeyValue kv = GetSubkey("IsFixedDistance");
				return (kv == null ? false : kv.GetBool());
			}
			set
			{
				KeyValue kv = GetSubkey("IsFixedDistance");
				if(kv == null)
				{
					kv = new KeyValue("IsFixedDistance");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("int")]
		[DefaultValue(typeof(NumberValue), "")]
		public NumberValue Height
		{
			get
			{
				return default(NumberValue);
			}
			set
			{
				KeyValue kv = GetSubkey("Height");
				if(kv == null)
				{
					kv = new KeyValue("Height");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("int")]
		[DefaultValue(typeof(NumberValue), "")]
		public NumberValue Duration
		{
			get
			{
				return default(NumberValue);
			}
			set
			{
				KeyValue kv = GetSubkey("Duration");
				if(kv == null)
				{
					kv = new KeyValue("Duration");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

	}
}
