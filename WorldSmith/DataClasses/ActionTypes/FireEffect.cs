/*****************************  NOTICE  ********************************************
* This file was autogenerated.  Do not edit.                                       *
* Instead, modify the schema in DataSchema related to this class and regenerate it *
***********************************************************************************/
using System;
using System.ComponentModel;
using WorldSmith.Panels;
using WorldSmith.Dialogs;
using KVLib;

namespace WorldSmith.DataClasses
{
	[DotaAction]
	[EditorGrammar("Create %EffectName on %Target attached by %EffectAttachType with a radius of %EffectRadius units.  It's Primary color is %EffectColorA and Secondary color is %EffectColorB.  It's duration is scaled by %EffectDurationScale and life is scaled by %EffectLifeDurationScale")]
	public partial class FireEffect : TargetedAction
	{
		public FireEffect(KeyValue kv)
			: base(kv)
		{
		}
		public FireEffect(string className)
			: base(className)
		{
		}
		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue("")]
		public string EffectName
		{
			get
			{
				KeyValue kv = GetSubkey("EffectName");
				return (kv == null ? "" : kv.GetString());
			}
			set
			{
				KeyValue kv = GetSubkey("EffectName");
				if(kv == null)
				{
					kv = new KeyValue("EffectName");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		public enum EffectAttachTypeEnum
		{
			start_at_origin,
			follow_origin,
			start_at_customorigin,
			follow_customorigin,
			start_at_attachment,
			follow_attachment,
			follow_eyes,
			follow_overhead,
			world_origin,
			follow_rootbone,
			follow_attachment_substepped,
			follow_renderorigin,
		}

		[Category("Misc")]
		[Description("No Description Set")]
		[DefaultValue(EffectAttachTypeEnum.follow_origin)]
		public EffectAttachTypeEnum EffectAttachType
		{
			get
			{
				KeyValue kv = GetSubkey("EffectAttachType");
				return (kv == null ? EffectAttachTypeEnum.follow_origin : kv.GetEnum<EffectAttachTypeEnum>());
			}
			set
			{
				KeyValue kv = GetSubkey("EffectAttachType");
				if(kv == null)
				{
					kv = new KeyValue("EffectAttachType");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("float")]
		[DefaultValue(typeof(NumberValue), "")]
		public NumberValue EffectRadius
		{
			get
			{
				KeyValue kv = GetSubkey("EffectRadius");
				return (kv == null ? new NumberValue("EffectRadius") : kv.GetNumberValue());
			}
			set
			{
				KeyValue kv = GetSubkey("EffectRadius");
				if(kv == null)
				{
					kv = new KeyValue("EffectRadius");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("float")]
		[DefaultValue(typeof(NumberValue), "")]
		public NumberValue EffectDurationScale
		{
			get
			{
				KeyValue kv = GetSubkey("EffectDurationScale");
				return (kv == null ? new NumberValue("EffectDurationScale") : kv.GetNumberValue());
			}
			set
			{
				KeyValue kv = GetSubkey("EffectDurationScale");
				if(kv == null)
				{
					kv = new KeyValue("EffectDurationScale");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("float")]
		[DefaultValue(typeof(NumberValue), "")]
		public NumberValue EffectLifeDurationScale
		{
			get
			{
				KeyValue kv = GetSubkey("EffectLifeDurationScale");
				return (kv == null ? new NumberValue("EffectLifeDurationScale") : kv.GetNumberValue());
			}
			set
			{
				KeyValue kv = GetSubkey("EffectLifeDurationScale");
				if(kv == null)
				{
					kv = new KeyValue("EffectLifeDurationScale");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("float float float")]
		[DefaultValue(typeof(NumberValue), "")]
		public NumberValue EffectColorA
		{
			get
			{
				KeyValue kv = GetSubkey("EffectColorA");
				return (kv == null ? new NumberValue("EffectColorA") : kv.GetNumberValue());
			}
			set
			{
				KeyValue kv = GetSubkey("EffectColorA");
				if(kv == null)
				{
					kv = new KeyValue("EffectColorA");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

		[Category("Misc")]
		[Description("float float float")]
		[DefaultValue(typeof(NumberValue), "")]
		public NumberValue EffectColorB
		{
			get
			{
				KeyValue kv = GetSubkey("EffectColorB");
				return (kv == null ? new NumberValue("EffectColorB") : kv.GetNumberValue());
			}
			set
			{
				KeyValue kv = GetSubkey("EffectColorB");
				if(kv == null)
				{
					kv = new KeyValue("EffectColorB");
					KeyValue.AddChild(kv);
				}
				kv.Set(value);
			}
		}

	}
}
